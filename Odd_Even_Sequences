Problem Statement:

Given an array of integers A of size N. Find the longest subsequence of A which is odd-even.

A subsequence is said to odd-even in the following cases:

The first element of the subsequence is odd, second element is even, third element is odd and so on. For example: [5, 10, 5, 2, 1, 4], [1, 2, 3, 4, 5]

The first element of the subsequence is even, second element is odd, third element is even and so on. For example: [10, 5, 2, 1, 4, 7], [10, 1, 2, 3, 4]

Return the maximum possible length of odd-even subsequence.

Source Code :

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        l=1
        flag=0
        for i in range(len(A)-1):
            if (A[i]%2==0 and A[i+1]%2!=0) or (A[i]%2!=0 and A[i+1]%2==0):
                l=l+1
        return l
