Problem Description:

Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]

Output:

Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.

Source Code:

class Solution:
	# @param A : list of integers
	# @param B : list of integers
	# @param C : list of integers
	# @return an integer
	def solve(self, A, B, C):
		i,j,k=0,0,0
		mi=9999999
		while i < len(A) and j<len(B) and k<len(C):
			m1=max(A[i],B[j],C[k])
			m2=min(A[i],B[j],C[k])
			mi=min(mi,abs(m1-m2))
			if mi==0:
				return 0
			if m2==A[i]:
				i+=1
			elif m2==B[j]:
				j=j+1
			else:
				k+=1
		return mi
